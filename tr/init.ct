# traction

commonly used getters (and setters?) for centraxx db

``//__init__.py: #py
``import``
``const``
``_readsettings``
``_settingsifnone``
#`_hassettings``
#`_settingspath``
class traction:
  ``vars``
  ``init``

  ``sample``
  ``patient``
  ``finding``
  ``labval``
  ``name``

  ``_where``
  ``_wherebuild``
  ``_sqlinplaceholder``
  ``_whereparam``
  ``_wherelike``
  ``_wherelikes``
  ``_idcs``
  
``

put constants here and rename package to tr so you can say sample(..., verbose=[tr.parentid, tr.locationpath])?

keep them lowercase that they are the same as the keys in the returned json?

``/const: #py
collectiondate = "samplingdate" # entnahmedatum / extraction date
derivaldate = "derivaldate" # aufteilungsdatum / date of distribution
extsampleid = "extsampleid"
first_repositiondate = "first_repositiondate" # datum der ersten einlagerung / date of first storage (not in fhir). is identical to derivaldate.
method_code = "method_code"
module = "module"
locationname = "locationname"
locationpath = "locationpath"
orgunit_code = "orgunit_code"
parentid = "parentid"
patientid = "patientid"
project_code = "project_code"
receiptdate = "receiptdate" # eingangsdatum / date of receipt
receptacle_code = "receptacle_code"
repositiondate = "repositiondate" # einlagerungsdatum / storage date
sampleid = "sampleid"
sampletype_code = "sampletype_code"
secondprocessing_code = "secondprocessing_code"
stockprocessing_code = "stockprocessing_code"
study_code = "study_code"
tier = "tier"
values = "values"
``


``/vars: #py
    external_sampleid_type = "..."
    sampleid_type = "..."
    idcs = {}
``

__init__ takes the db target either as string or dbcq object.

``/init: #py
    def __init__(self, target):
        ``.``
``

either pass a string argument to dbcq or use dbcq instance directly.

`` #py
        if isinstance(target, str):
            self.db = dbcq(target)
        elif isinstance(target, dbcq): 
            self.db = target
        else:
            raise Exception("target needs to be string or dbcq instance")
``

import dbcq.

``/import: #py
from dbcq import *
``

cache the id container types by code.

    self.idcs = self._idcs()
    

sample gets sample(s) by sampleid or external id. pass sampleids as
array. to join in more information, say verbose_all=True, this is
slower than non-verbose.

the first implementation tried to take the tablenames/colums as keys
for the returned json fields, but that doesn't quite work for
patientpsn, where the key would be just 'idcontainer.psn'. so maybe
rename the joined-in fields to sampleid, *_code, patientid,
parentid etc.

``/sample: #py
    def sample(self, sampleids=None, sid:str=None, patientids=None, pid:str=None, locationpaths=None, studies=None, mudules=None, tiers=None, verbose=[], verbose_all=False, missing=False):
        ``.``
``

these are all possible verbose options (verbose-all-array).

`` #py
        vaa = [locationname, locationpath, module, orgunit_code, parentid,
               patientid, project_code, receptacle_code, sampleid, sampletype_code,
               secondprocessing_code, stockprocessing_code, study_code, tier]
``

always join in the sampleid for now.

`` #py
        if not sampleid in verbose:
            verbose.append(sampleid)
``

put the keys for the given arguments into the verbose array, so that
they land in the join, so that the wherestring can access the
joined-in fields.

`` #py
        if patientids:
            verbose.append(patientid)
        if studies:
            verbose.append(study_code)
        if tiers:
            verbose.append(tier)
        if modules:
            verbose.append(module)
        if locationpaths:
            verbose.append(locationpath)
``

on verbose_all include all constants in the verbose array.

`` #py
        if verbose_all == True:
            verbose = vaa
``

the select statements for optional joins by key.

`` #py
        selects = {
            sampleid: [f"sidc.psn as '{sampleid}'"],
            extsampleid: [f"extsidc.psn as '{extsampleid}'"],
            parentid: [f"parentidc.psn as '{parentid}'"],
            locationname: [f"samplelocation.locationid as '{locationname}'"], 
            locationpath: [f"samplelocation.locationpath as '{locationpath}'"],
            module: [f"modulesidc.psn as '{module}'"],
            sampletype_code: [f"sampletype.code as '{sampletype_code}'"],
            stockprocessing_code: [f"stockprocessing.code as '{stockprocessing_code}'"],
            secondprocessing_code: [f"secondprocessing.code as '{secondprocessing_code}'"],
            project_code: [f"project.code as '{project_code}'"],
            patientid: [f"patidc.psn as '{patientid}'"],
            receptacle_code: [f"receptable.code as '{receptacle_code}'"],
            orgunit_code: [f"orgunit.code as '{orgunit_code}'"],
            study_code: [f"flexistudy.code as '{study_code}'"],
            tier: [f"tiersidc.psn as '{tier}'"]
        }
``

the join statements for optional joins by key. what about the same
join needed for two different keys (e.g. locationname and
locationpath)? filter them out in the end?

maybe hold a join dict, jd, to pull the joins from?

joins = {
  sampleid = jd["sample_to_sampleid"],
  extsampleid = jd["sample_to_extsampleid"],
  module: jd["sample_to_module"],
  parentid: jd["sample_to_parentid"],
  locationname: jd["sample_to_samplelocation"],
  locationpath: jd["sample_to_samplelocation"],
  sampletype_code: jd["sample_to_sampletype"],
  stockprocessing_code: jd["sample_to_stockprocessing"],
  secondprocessing_code: jd["sample_to_secondprocessing"],
  tier: jd["sample_to_tier"],
  project_code: jd["sample_to_project"],
  patientid: jd["sample_to_patientid"], # two entries
  receptacle_code: jd["sample_to_receptacle"],
  orgunit_code: jd["sample_to_orgunit"],
  study_code: jd["sample_to_study"]
}

`` #py
        joins = {
            sampleid: ["inner join centraxx_sampleidcontainer as sidc on sidc.sample = sample.oid"],
            extsampleid: ["inner join centraxx_sampleidcontainer as extsidc on extsidc.sample = sample.oid"],
            module: ["inner join centraxx_sampleidcontainer as modulesidc on modulesidc.sample = sample.oid"],
            parentid: ["left join centraxx_sampleidcontainer parentidc on parentidc.sample = sample.parent"],
            locationname: ["left join centraxx_samplelocation samplelocation on samplelocation.oid = sample.samplelocation"],
            locationpath: ["left join centraxx_samplelocation samplelocation on samplelocation.oid = sample.samplelocation"],
            sampletype_code: ["left join centraxx_sampletype as sampletype on sampletype.oid = sample.sampletype"],
            stockprocessing_code: ["left join centraxx_stockprocessing as stockprocessing on sample.stockprocessing = stockprocessing.oid"],
            secondprocessing_code: ["left join centraxx_stockprocessing as secondprocessing on sample.secondprocessing = secondprocessing.oid"],
            tier: ["inner join centraxx_sampleidcontainer as tiersidc on tiersidc.sample = sample.oid"],
            project_code: ["left join centraxx_project as project on sample.project = project.oid"],
            patientid: ["left join centraxx_patientcontainer as patientcontainer on sample.patientcontainer = patientcontainer.oid",
            "left join centraxx_idcontainer as patidc on patidc.patientcontainer = patientcontainer.oid"], 
            receptacle_code: ["left join centraxx_samplereceptable as receptable on sample.receptable = receptable.oid"], # receptable seems to be a typo in the table naming
            orgunit_code: ["left join centraxx_organisationunit as orgunit on sample.orgunit = orgunit.oid"],
            study_code: ["left join centraxx_flexistudy as flexistudy on sample.flexistudy = flexistudy.oid"]
        }
``

put together the select string and join string for the query.

maybe get them from function:

selectstr = self._select(selects, verbose, ["sample.*"])  # select filters the selects by the verbose array and returns the sql select string
joinstr = self._join(joins, verbose)  # join filters the joins by the verbose array and returns the sql join string

`` #py
        selecta = ["sample.*"]
        joina = []
        for verb in verbose:
            if not verb in selects: # selects and joins should hold the same keys
                print(f"error: key {verb} must be in {vaa}.")
        
            # put in the select line(s)
            for s in selects[verb]:
                selecta.append(s)

            for s in joins[verb]:
                # both locationpath and locationname join in samplelocation, so check that it's not already in the join array
                if not s in joina:
                    joina.append(s)
``

get the selections and joins as string.

`` #py
        selectstr = ", \n".join(selecta)
        joinstr = "\n ".join(joina)
``

get the where string.

`` #py
        (wherestr, whereargs) = self._where(sampleids=sampleids, extsampleids=extsampleids, patientids=patientids, studies=studies, modules=modules, tiers=tiers, locationpaths=locationpaths, verbose=verbose)
``

stick together the query, get the result and return it.

`` #py
        query = f"select {selectstr} from centraxx_sample sample {joinstr} where {wherestr}"
        # print(query)
        res = self.db.qfad(query, whereargs)

        return res
``

patient gives patients.

``/patient: #py
    def patient(self, patientids=None, sampleids=None, studies=None):
        ``.``
``

get from sample to patient psn: sample to patientcontainer,
patientcontainer to idcontainer, idcontainer has psn.

`` #py
        query = f"""
        select patc.*, patidc.psn as {patientid} from centraxx_idcontainer patidc
        left join centraxx_patientcontainer patc on patidc.patientcontainer = patc.oid
        left join centraxx_sample sample on sample.patientcontainer = patc.oid
        left join centraxx_sampleidcontainer sidc on sidc.sample = sample.oid
        where patidc.idcontainertype = 8"""
``

get the where string for the args and stick together the query.

`` #py
        (wherestr, whereargs) = self._where(sampleids=sampleids, patientids=patientids, studies=studies)

        query += " and " + wherestr
        #print(query)
        #print(whereargs)
``

get the result and return it.

`` #py
        res = self.db.qfad(query, whereargs)

        return res
``

finding gets the laborfinding (messbefund / begleitschein) for
sampleid or messbefund.  (if verbose with its recorded values?)

``/finding: #py
    def finding(self, sampleids=None, methods=None, studies=None, patientids=None, modules=None, tiers=None, visits=None, verbose=[], verbose_all=False):
        ``findings``
        ``values``
        ``ret``
``

stick together the query.

``/finding/findings: #py
        query = f"""select laborfinding.oid as "laborfinding_oid", laborfinding.*, labormethod.code as {method_code}, sidc.psn as {sampleid}
        from centraxx_laborfinding as laborfinding

        -- go from laborfinding to sample
        left join centraxx_labormethod as labormethod on laborfinding.labormethod = labormethod.oid
        left join centraxx_labormapping as labormapping on labormapping.laborfinding = laborfinding.oid
        left join centraxx_sample sample on labormapping.relatedoid = sample.oid
        left join centraxx_sampleidcontainer sidc on sidc.sample = sample.oid"""
``

maybe verbose:

always join in the sampleid, that also joins in the method.

        if not sampleid in verbose:
            verbose.append(sampleid)

if studies:
  verbose.append(study_code)
if patientids:
  verbose.append(patientid)
if modules:
  verbose.append(module)
if tiers:
  verbose.append(tier)



maybe joins:

joins = {
  sampleid: jd["laborfinding_to_sampleid"], # a bit redundant, but maybe more concise than laborfinding_to_sample followed by sample_to_sampleid?
  study: jd["sample_to_study"],
  module: jd["sample_to_module"],
  tier: jd["sample_to_tier"],
  patientid: jd["sample_to_patientid"]
}

get the where string and append it to the query.

``
        (wherestr, whereargs) = self._where(sampleids=sampleids, methods=methods, studies=studies)

        query += " where " + wherestr
        # print(query)
``

get the result.

``
        findings = self.db.qfad(query, whereargs)
``

for each of the findings, pull in the recorded values.

maybe only on --verbose = ["values"]

``/finding/values:
        for i, finding in enumerate(findings):
            ``query``
            ``put``
``

construct the query for the recorded values.

``/finding/values/query:
            query = """select recordedvalue.*, laborvalue.code as laborvalue_code
                from centraxx_laborfinding as laborfinding

                -- go from laborfinding to recorded value
                join centraxx_labfindinglabval as labfindinglabval on labfindinglabval.laborfinding = laborfinding.oid
                join centraxx_recordedvalue as recordedvalue on labfindinglabval.oid = recordedvalue.oid

                --go from labfindinglabval to the laborvalue for the messparam
                join centraxx_laborvalue laborvalue on labfindinglabval.laborvalue = laborvalue.oid

                where laborfinding.oid = ?
            """
``

key the values by laborvalue_code (the messparam name).

``
            vals = self.db.qfad(query, finding['laborfinding_oid'])
            valsbycode = {}
            for val in vals:
              valsbycode[val["laborvalue_code"]] = val
``

put the values to the finding.

``/finding/values/put:
            findings[i][values] = valsbycode
``

return the findings with their respective values.

``/finding/ret:
        return findings
``

labval gets laborvalues (messparameter) of a method.
        
``/labval:
    def labval(self, methods=None):
        ``.``
``

the query.

``
        query = f"""select labval.*, method.code
from centraxx_labormethod method
inner join centraxx_crftemplate crf_t
    on method.crf_template=crf_t.oid
inner join centraxx_crftempsection crf_ts
    on crf_t.oid=crf_ts.crftemplate
inner join centraxx_crftempsection_fields crf_tsf
    on crf_ts.oid=crf_tsf.crftempsection_oid
inner join centraxx_crftempfield crf_tf
    on crf_tsf.crftempfield_oid=crf_tf.oid
inner join centraxx_laborvalue labval
    on crf_tf.labval=labval.oid"""
``

add the where string.

``
        (wherestr, whereargs) = self._where(methods=methods)

        query += " where " + wherestr
``

return the result.

``
        res = self.db.qfad(query, whereargs)

        return res
``

name gives the multilingual names for a code or all codes in a table.

the result is keyed by code and language like this:

"NUM_NMR_ISOLEUCINE_VALUE": {
   "de": "Isoleucin",
   "en": "Isoleucine"
}

table: the name of the centraxx table without centraxx_ prefix
code: a specific code, if none given, all code - name mappings for table are given
lang: de|en
ml_table: if the name of the table connecting to multilingualentry is not simlpy the queried table name followed by "_ml_name", give the connecting table's name here. eg: name('laborvaluegroup', ... ml_name='labval_grp_ml_name')


``/name:
    def name(self, table:str, code:str=None, lang:str=None, ml_table:str=None):
        ``.``
``

interlacing the table name assumes that the referencing pattern for multilingual entries stays the same across table names.

``
        query = "select [" + table + "].code, multilingual.value as name, multilingual.lang as lang"
        query += " from [centraxx_" + table + "] as [" + table + "]"
``

put together the name for the ml_table.

``
        ml_name = ""
        if ml_table != None: # the name is different
            ml_name = "centraxx_" + ml_table
        else: # the name is the same
            ml_name = "centraxx_" + table + "_ml_name"
``

add it to the query.

``
        query += " inner join [" + ml_name + "] mlname on mlname.related_oid = [" + table + "].oid"
        query += " inner join centraxx_multilingualentry multilingual on mlname.oid = multilingual.oid"
``

restrict the query to specific lang or code if given.

``
        wherestrings = []
        args = []
        if code != None:
            wherestrings.append(self._whereparam("[" + table + "].code"))
            args.append(code)
        if lang != None:
            wherestrings.append(self._whereparam("multilingual.lang"))
            args.append(lang)
``

only add sql-where if needed

``
        if len(wherestrings) > 0:
            query += " where "
            # join where clauses by and
            query += " and ".join(wherestrings)

        # print(query)
``

query.

``
        res = self.db.qfad(query, *args)
``

structure by code and lang and return.

``
        out = {}
        for line in res:
            code = line["code"]
            lang = line["lang"]
            if not code in out:
               out[code] = {}
            out[code][lang] = line["name"]
        return out
``


_where returns the wherestring and args array for the provided arguments (that are not None).
the user needs to make sure that whatever is referenced here is joined into the query before.
the names are assumed to be the tr constants, like e.g. tr.sampleid.
like is an array of tr constants of the arguments for which we check likeness. we only check likeness for the first passed string of an argument array. if for example like=[tr.locationpath], we check likeness of locationpaths[0]."""

make sure only one of sampleids or extsampleids is passed?

``/_where:
    def _where(self, sampleids=None, sid=None, patientids=None, pid=None, studies=None, locationpaths=None, methods=None, modules=None, tiers=None, like=[], verbose=[]): # -> (str, [])
        ``.``
``

put the where-info for each field into wheredict along with the passed arguments.

arr: the array of values to check against
field: the table and field where it should match. 
morewhere: additional where constraints, e.g. idcontainertypes for samples.

``
        wheredict = {
          sampleid: { "arr": sampleids, "field": "sidc.psn", "morewhere": f"sidc.idcontainertype = 6" },  # {self._idc[sid]}" }, # pass the idcontainertype check along

          # extsampleid: { "arr": extsampleids, "field": "extsidc.psn", "morewhere": "extsidc.idcontainertype = 7" },
          patientid: { "arr": patientids, "field": "patidc.psn", "morewhere": f"patidc.idcontainertype = 8" }, # {self._idc[pid]}" },
          study_code: { "arr": studies, "field": "flexistudy.code" },
          locationpath: { "arr": locationpaths, "field": "samplelocation.locationpath" },
          method_code: { "arr": methods, "field": "labormethod.code" },
          module: { "arr": modules, "field": "modulesidc.psn", "morewhere": "modulesidc.idcontainertype = 72" },
          tier: { "arr": tiers, "field": "tiersidc.psn", "morewhere": "tiersidc.idcontainertype = 73" }
        }
``

stick together where clauses and arguments that covers the args that
are not None and the constants in verbose. return the wherestring and
args array.

``
        (wherearr, whereargs) = self._wherebuild(wheredict, like, verbose)

        wherestr = " and ".join(wherearr)
        return (wherestr, whereargs)
``

_wherebuild builds wherestrings and fills whereargs.

``/_wherebuild:
    def _wherebuild(self, wheredict, likearr=[], verbose=[]): # ([]string, [])
        ``.``
``

wherearr and whereargs get filled.

``
        wherearr = []
        whereargs = []
``

iterate the passed wheredict. key is one of the tr constant strings, e.g. tr.locationpath.

``
        for (key, row) in wheredict.items():
            ``no arr``
            ``like``
            ``exact``
            ``more where``
``

if no or empty search array, put in the morewhere-clause if the key is
in verbose, then skip.

``./no arr:
            if row["arr"] == None or len(row["arr"]) == 0:
                # the key is in the verbose-output selection
                if key in verbose and "morewhere" in row:
                    # we're not searching for specific values, so only add the morewhere clause
                    wherearr.append(row["morewhere"])
                continue
``

should we check for likeness for this key?

``../like:
            if key in likearr: 
                # put in an or-chain of like checks over all elements
                s = self._wherelikes(row["field"], row["arr"]) 
                wherearr.append(s)
                whereargs.append(row["arr"])
``

else we search by exact matching.

``../exact:
            else:
                placeholder = traction._sqlinplaceholder(len(row["arr"])) # todo put in package? tr._sqlinplaceholder
                # fill wherearr and whereargs
                wherearr.append(row["field"] + " in " + placeholder) # e.g. samplelocation.locationpath in (?, ?, ?)
                whereargs.extend(row["arr"])
``

are there additional where clauses passed (e.g. for idcontainertype)? add them.

``../more where:
            if "morewhere" in row:
                wherearr.append(row["morewhere"])
``

out of the loop, return.

``../
        return (wherearr, whereargs)
``

    
_sqlinplaceholder returns a string like (?, ?, ?, ? ...) with n question marks for sql in.

``/_sqlinplaceholder:
    def _sqlinplaceholder(n):

        # put this in a package sqlutil?

        out = "("
        for i in range(n):
            out += "?"
            if i < n - 1:
                out += ","
        out += ")"
        return out
``

_whereparam gives a ?-parameterized sql where expression for name
equal or like parameter for use in queries.

``/_whereparam:
    def _whereparam(self, name, like:bool=None):
        if like == None or like == False:
            return name + " = ?"
        else:
            return name + " like '%' + ? + '%'"
``

_wherelike gives a ?-parameterized sql where like expression.

``/_wherelike:
    def _wherelike(self, name):
          return name + " like '%' + ? + '%'"

``

_wherelikes gives a ?-parameterized sql of or-joined where-like expressions.

``/_wherelikes:
    def _wherelikes(self, fieldarr):
        a = []
        for f in fieldarr:
            a.append(f + " like '%' + ? + '%'") # the sql takes literal plusses like here
        return " or ".join(a)
``

_idcs returns a mapping of id container types from code to respective oid.

``/_idcs:
    def _idcs(self):
        ``.``
``

get the codes and oids.

``
        query = "select code, oid from centraxx_idcontainertypes"
        res = self.db.qfad(query)
``

return keyed by idcontainertype code.

``
        out = {}
        for row in res:
          out[row["code"]] = row["oid"]
        return out
``

sid = self._settingsifnone("sid", sid)
pid = self._settingsifnone("pid", pid)

settingsifnone returns the default value from the settings if no value is given.

``/_settingsifnone:
def _settingsifnone(self, key, val):
    ``.``
``

if the value is not none, return it.

``
    if val != None:
        return val
``

if the value is none, try to return it from settings:

``
    if key in self.setting:
        return self.settings[key]
``

return none.

``
    return None
``

readsettings reads the setting file (and creates it if it's not there).

``/_readsettings:
def _readsettings():
  ``.``
``

if no settings, create stub settings file.

``
  if not hassettings():
    with open(settingspath(), "w") as file:
      settingsstr = """
# traction settings
# sid sets the default sample id container type
sid: # enter the code for your default sample idcontainertype here
# pid sets the default patient id container type
pid: # enter the code for your default patient idcontainertype here
"""
``


else
  # read settings file yaml
  with open(settingspath(), "r") as file:
    settings = yaml.safe_load(file)
    return settings





# settingspath returns the path to the settings
def settingspath():
    home = Path.home()
    return home / ".traction" / "settings.yaml"

# hassettings reports whether there is a settings file
def hassettings():
    return settingspath().is_file()
